# Rindang/docker-compose.yaml
version: '3.8'

services:
  # ------------------------------------------------------------------
  # 1. LAYANAN DATABASE: MySQL 8.0
  # ------------------------------------------------------------------
  db:
    image: mysql/mysql-server:8.0
    container_name: rindang_mysql_db
    restart: always
    environment:
      # Variabel ini sama dengan yang diatur di .env
      MYSQL_ROOT_PASSWORD: rindang123
      MYSQL_DATABASE: rindang_db
    ports:
      # Mapping port: (port host):(port container)
      - "3306:3306"
    volumes:
      # Menyimpan data di volume persisten agar data tidak hilang saat container di-stop
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 5s
      retries: 5
      start_period: 20s

  # ------------------------------------------------------------------
  # 2. LAYANAN BACKEND: Kerangka Node.js (Akan kita tambahkan Dockerfile nanti)
  # ------------------------------------------------------------------
  # backend:
  #   container_name: rindang_backend
  #   build: 
  #     context: ./Backend  # Lokasi Dockerfile akan diletakkan (relatif terhadap docker-compose.yaml)
  #     dockerfile: Dockerfile
  #   command: npm run dev # Perintah yang dijalankan saat container aktif
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     # Menggunakan variabel dari file .env di host
  #     - NODE_ENV=development
  #     - PORT=5000
  #     - JWT_SECRET=KunciRahasiaSangatPanjangUntukJWT
  #     # **PENTING:** Untuk DB_HOST, kita menggunakan nama service Docker (db)
  #     - DB_HOST=db 
  #     - DB_NAME=rindang_db
  #     - DB_USER=root
  #     - DB_PASS=your_mysql_password
  #   volumes:
  #     # Mapping kode agar perubahan lokal terlihat di container
  #     - ./Backend:/app
  #     # Menghindari mapping node_modules agar tidak terjadi konflik
  #     - /app/node_modules
  #   depends_on:
  #     # Pastikan DB siap sebelum backend mencoba koneksi
  #     db:
  #       condition: service_healthy

volumes:
  db_data: